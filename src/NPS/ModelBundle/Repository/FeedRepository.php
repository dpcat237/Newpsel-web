<?php

namespace NPS\ModelBundle\Repository;

use NPS\ModelBundle\Entity\Feed;
use NPS\ModelBundle\Entity\User;
use NPS\ModelBundle\Entity\UserFeed;
use NPS\ModelBundle\Entity\UserItem;
use NPS\ModelBundle\Repository\BaseRepository;
use NPS\CoreBundle\Helper\TextHelper;
use NPS\CoreBundle\Helper\NotificationHelper;

/**
 * FeedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeedRepository extends BaseRepository
{
    //SimplePie RSS bundle object
    protected $rss;

    //Redis
    protected $cache;

    /**
     * Set SimplePie RSS
     * @param SimplePie $rss
     */
    public function setRss($rss)
    {
        $this->rss = $rss;
    }

    /**
     * Set Redis
     * @param Redis $cache
     */
    public function setCache($cache)
    {
        $this->cache = $cache;
    }

    /**
     * Subscribe to feed
     * @param string $url
     * @param User   $user
     *
     * @throws Exception it's necessary set $rss
     * @return array
     */
    public function createFeed($url, $user = null)
    {
        if (!empty($this->rss) and get_class($this->rss) == "SimplePie") {
            $error = null;
            $feed = null;
            $em = $this->getEntityManager();
            $url = TextHelper::fixUrl($url);

            if (!$url || !TextHelper::validateFeedUrl($url)) {
                $error = 302;
            }

            $checkFeed = $this->checkExistFeedUrl($url);
            if (!$checkFeed instanceof Feed) {
                try {
                    $this->rss->set_feed_url($url);
                    $this->rss->set_parser_class();
                    $this->rss->enable_xml_dump();
                    $this->rss->init();


                    if ($this->rss->get_title()) {
                        $feed = new Feed();
                        $feed->setUrl($url);
                        $feed->setUrlHash(sha1($url));
                        $feed->setTitle($this->rss->get_title());
                        $feed->setWebsite($this->rss->get_link());
                        $feed->setLanguage($this->rss->get_language());
                        $feed->setFavicon($this->rss->get_favicon());
                        $em->persist($feed);
                    } else {
                        $error = NotificationHelper::ERROR_WRONG_FEED;
                    }
                } catch (\Exception $e) {
                    $error = $e->getMessage();

                }
            } else {
                $feed = $checkFeed;
            }

            if (empty($error)) {
                if ($user instanceof User) {
                    $feedSubscribed = $this->checkUserSubscribed($user->getId(), $feed->getId());
                    if (!$feedSubscribed) {
                        $userFeed = new UserFeed();
                        $userFeed->setUser($user);
                        $userFeed->setFeed($feed);
                        $em->persist($userFeed);
                        $em->flush();

                        $this->addFirstItems($feed, $user);
                    }
                }
                $em->flush();
            }

        } else {
            throw new Exception('SimplePie object not set');
        }
        $result['feed'] = $feed;
        $result['error'] = $error;

        return $result;
    }

    /**
     * Add first items for just subscribed user
     * @param $feed
     * @param $user
     */
    public function addFirstItems($feed, $user)
    {
        parent::preExecute();
        if (count($feed->getItems()) < 1) {
            $this->updateFeedData($feed->getId());
        }
        $itemRepo = $this->em->getRepository('NPSModelBundle:Item');
        $items = $itemRepo->getLast($feed->getId());

        if (count($items)) {
            foreach ($items as $item) {
                $userItem = new UserItem();
                $userItem->setUser($user);
                $userItem->setItem($item);
                $userItem->setIsUnread(true);
                $this->em->persist($userItem);
            }
            $this->em->flush();
        }
    }

    /**
     * Check if user is subscribed
     * @param $userId
     * @param $feedId
     *
     * @return bool
     */
    public function checkUserSubscribed($userId, $feedId)
    {
        $em = $this->getEntityManager();
        $repository = $em->getRepository('NPSModelBundle:UserFeed');
        $query = $repository->createQueryBuilder('o')
            ->where('o.user = :userId')
            ->andWhere('o.feed = :feedId')
            ->setParameter('userId', $userId)
            ->setParameter('feedId', $feedId)
            ->getQuery();
        $feedCollection = $query->getResult();

        if (count($feedCollection)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Check if already exists this feed in data base
     * @param string $url
     *
     * @return Feed
     */
    public function checkExistFeedUrl($url)
    {
        $em = $this->getEntityManager();
        $feedRepo = $em->getRepository('NPSModelBundle:Feed');
        $urlHash = sha1($url);
        $feed = $feedRepo->findOneByUrlHash($urlHash);

        return $feed;
    }

    /**
     * Update feed's data
     * @param integer $feedId
     *
     * @return array
     */
    public function updateFeedData($feedId)
    {
        if (!empty($this->rss) and get_class($this->rss) == "SimplePie") {
            $error = null;
            $em = $this->getEntityManager();
            $feedRepo = $em->getRepository('NPSModelBundle:Feed');
            $feed = $feedRepo->find($feedId);

            if ($feed instanceof Feed) {
                $this->rss->set_feed_url($feed->getUrl());
                $this->rss->set_parser_class();
                $this->rss->enable_xml_dump();
                $this->rss->init();
                $rssError = $this->rss->error();

                if (empty($rssError)) {
                    if (!$feed->getDateSync()) {
                        //get last 25 items
                        $newItems = $this->getItemNew($this->rss->get_items());
                    } else {
                        //get all items since last sync
                        $newItems = $this->getItemSync($this->rss->get_items(), $feed->getDateSync());
                    }

                    if (count($newItems)) {
                        $itemRepo = $em->getRepository('NPSModelBundle:Item');
                        $itemRepo->setCache($this->cache);
                        foreach ($newItems as $newItem) {
                            $itemRepo->addItem($newItem, $feed);
                        }

                        //update last sync data
                        $feed->setDateSync();
                        $em->persist($feed);
                        $em->flush();
                    }
                } else {
                    $error = $rssError;
                }
            } else {
                $error = 303;
            }
        } else {
            throw new Exception('SimplePie object not set');
        }
        $result['error'] = $error;

        return $result;
    }

    /**
     * Get last 25 items for new feed
     * @param array $items
     *
     * @return array
     */
    private function getItemNew($items)
    {
        $c = 0;
        $newItems = array();
        foreach ($items as $item) {
            $newItems[] = $item;
            $c++;
            if ($c >= 25) {
                break;
            }
        }

        return $newItems;
    }

    /**
     * Get new items since last sync of feed
     * @param array   $items
     * @param integer $dateSync
     *
     * @return array
     */
    private function getItemSync($items, $dateSync)
    {
        $newItems = array();
        foreach ($items as $item) {
            if ($item->get_date('U') > $dateSync) {
                $newItems[] = $item;
            } else {
                break;
            }
        }

        return $newItems;
    }

    /**
     * Get user's feeds list for api
     * @param int $userId
     * @param int $lastUpdate
     *
     * @return array
     */
    public function getUserFeedsApi($userId, $lastUpdate = 0)
    {
        parent::preExecute();
        $repository = $this->em->getRepository('NPSModelBundle:Feed');
        $query = $repository->createQueryBuilder('f')
            ->select('f.id AS api_id, f.title, f.website, f.favicon, f.dateUp AS lastUpdate')
            ->join('f.userFeeds', 'uf')
            ->join('uf.user', 'u')
            ->where('u.id = :userId')
            ->andWhere('f.dateUp > :lastUpdate')
            ->orderBy('f.dateUp', 'ASC')
            ->setParameter('userId', $userId)
            ->setParameter('lastUpdate', $lastUpdate)
            ->getQuery();
        $feedCollection = $query->getResult();

        return $feedCollection;
    }
}
