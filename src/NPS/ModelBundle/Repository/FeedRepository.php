<?php

namespace NPS\ModelBundle\Repository;

use NPS\ModelBundle\Entity\Feed;
use NPS\ModelBundle\Repository\BaseRepository;
use NPS\CoreBundle\Helper\TextHelper;

/**
 * FeedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeedRepository extends BaseRepository
{
    //SimplePie RSS bundle object
    protected $rss;

    /**
     * Set SimplePie RSS
     */
    public function setRss($rss)
    {
        $this->rss = $rss;
    }

    /**
     * Subscribe to feed
     * @param string $url
     *
     * @return array
     */
    public function createFeed($url)
    {
        if (!empty($this->rss) and get_class($this->rss) == "SimplePie") {
            $error = null;
            $em = $this->getEntityManager();
            $url = TextHelper::fixUrl($url);

            if (!$url || !TextHelper::validateFeedUrl($url)){
                $error = 302;
            }

            $checkFeed = $this->checkExistFeedUrl($url);
            if (!$checkFeed instanceof Feed) {
                try {
                    $this->rss->set_feed_url($url);
                    $this->rss->set_parser_class();
                    $this->rss->enable_xml_dump();
                    $this->rss->init();

                    $feed = new Feed();
                    $feed->setUrl($url);
                    $feed->setTitle($this->rss->get_title());
                    $feed->setWebsite($this->rss->get_link());
                    $feed->setLanguage($this->rss->get_language());
                    $feed->setFavicon($this->rss->get_favicon());
                    $em->persist($feed);

                    $em->flush();
                } catch (\Exception $e) {
                    $error = $e->getMessage();
                }
            }
        } else {
            throw new Exception('SimplePie object not set');
        }
        $result['feed'] = $feed;
        $result['error'] = $error;

        return $result;
    }

    /**
     * Check if already exists this feed in data base
     * @param string $url
     *
     * @return Feed
     */
    public function checkExistFeedUrl($url) {
        $em = $this->getEntityManager();
        $feedRepo = $em->getRepository('NPSModelBundle:Feed');
        $feed = $feedRepo->findByUrl($url);

        return $feed;
    }

    /**
     * Update feed's data
     */
    public function updateFeedData($rss, $feedId, $ignoreDaemon = false, $noCache = false, $overrideUrl = false)
    {
        $error = null;
        $em = $this->getEntityManager();
        $feedRepo = $em->getRepository('NPSModelBundle:Feed');
        $feed = $feedRepo->find($feedId);

        if ($feed instanceof Feed) {
            //$url = $feed->getUrl();
            $url = 'http://www.androidcentral.com/rss.xml';
            $checkContents = TextHelper::fetchFileContents($url); //TODO: review timestamp
            $contents = $checkContents['contents'];
            if (!$checkContents['error']) {
                //$rss->set_sanitize_class("SimplePie_Sanitize");
                //$rss->sanitize = new SimplePie_Sanitize();
                $rss->set_output_encoding('UTF-8');
                $rss->set_raw_data($contents);
                $rss->enable_cache(false);
                $rss->init();


                $new = array();
                $yesterday = time() - (24*60*60);

                foreach ($rss->get_items() as $item) {

                    // Calculate 24 hours ago
                    echo $item->get_date()."<br />";

                    // Compare the timestamp of the feed item with 24 hours ago.
                    if ($item->get_date('U') > $yesterday) {

                        // If the item was posted within the last 24 hours, store the item in our array we set up.
                        $new[] = $item;
                    }
                }

                // Loop through all of the items in the new array and display whatever we want.
                echo 'tut: '.count($new); exit();

                foreach($new as $item) {
                    echo '<h3>' . $item->get_title() . '</h3>';
                    echo '<p>' . $item->get_date('j M Y, H:i:s O') . '</p>';
                    echo $item->get_description();
                    echo '<hr />';
                }



                echo "tuta: ".count($rss->get_items()); exit();
                //TODO: install bundle -> rssfuncs.php L331





            } else {
                $error = $checkContents['error'];
            }
        } else {
            $error = 303;
        }
        $result['error'] = $error;

        return result;
    }
}
