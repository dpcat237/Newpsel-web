<?php

namespace NPS\ModelBundle\Repository;

use NPS\ModelBundle\Entity\Feed;
use NPS\ModelBundle\Repository\BaseRepository;
use NPS\CoreBundle\Helper\TextHelper;

/**
 * FeedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeedRepository extends BaseRepository
{
    //SimplePie RSS bundle object
    protected $rss;

    /**
     * Set SimplePie RSS
     * @param SimplePie $rss
     */
    public function setRss($rss)
    {
        $this->rss = $rss;
    }

    /**
     * Subscribe to feed
     * @param string $url
     *
     * @throws Exception it's necessary set $rss
     * @return array
     */
    public function createFeed($url)
    {
        if (!empty($this->rss) and get_class($this->rss) == "SimplePie") {
            $error = null;
            $em = $this->getEntityManager();
            $url = TextHelper::fixUrl($url);

            if (!$url || !TextHelper::validateFeedUrl($url)) {
                $error = 302;
            }

            $checkFeed = $this->checkExistFeedUrl($url);
            if (!$checkFeed instanceof Feed) {
                try {
                    $this->rss->set_feed_url($url);
                    $this->rss->set_parser_class();
                    $this->rss->enable_xml_dump();
                    $this->rss->init();

                    $feed = new Feed();
                    $feed->setUrl($url);
                    $feed->setUrlHash(sha1($url));
                    $feed->setTitle($this->rss->get_title());
                    $feed->setWebsite($this->rss->get_link());
                    $feed->setLanguage($this->rss->get_language());
                    $feed->setFavicon($this->rss->get_favicon());
                    $em->persist($feed);
                    $em->flush();
                } catch (\Exception $e) {
                    $error = $e->getMessage();
                }
            } else {
                $feed = $checkFeed;
            }
        } else {
            throw new Exception('SimplePie object not set');
        }
        $result['feed'] = $feed;
        $result['error'] = $error;

        return $result;
    }

    /**
     * Check if already exists this feed in data base
     * @param string $url
     *
     * @return Feed
     */
    public function checkExistFeedUrl($url)
    {
        $em = $this->getEntityManager();
        $feedRepo = $em->getRepository('NPSModelBundle:Feed');
        $urlHash = sha1($url);
        $feed = $feedRepo->findOneByUrlHash($urlHash);

        return $feed;
    }

    /**
     * Update feed's data
     * @param integer $feedId
     *
     * @return array
     */
    public function updateFeedData($feedId)
    {
        if (!empty($this->rss) and get_class($this->rss) == "SimplePie") {
            $error = null;
            $em = $this->getEntityManager();
            $feedRepo = $em->getRepository('NPSModelBundle:Feed');
            $feed = $feedRepo->find($feedId);

            if ($feed instanceof Feed) {
                $this->rss->set_feed_url($feed->getUrl());
                $this->rss->set_parser_class();
                $this->rss->enable_xml_dump();
                $this->rss->init();
                $rssError = $this->rss->error();

                if (empty($rssError)) {
                    if (!$feed->getDateSync()) {
                        //get last 25 entries
                        $newItems = $this->getItemNew($this->rss->get_items());
                    } else {
                        //get all entries since last sync
                        $newItems = $this->getItemSync($this->rss->get_items(), $feed->getDateSync());
                    }

                    if (count($newItems)) {
                        $entryRepo = $em->getRepository('NPSModelBundle:Entry');
                        foreach ($newItems as $newItem) {
                            $entryRepo->addEntry($newItem, $feed);
                        }

                        //update last sync data
                        $feed->setDateSync();
                        $em->persist($feed);
                        $em->flush();
                    }
                } else {
                    $error = $rssError;
                }
            } else {
                $error = 303;
            }
        } else {
            throw new Exception('SimplePie object not set');
        }
        $result['error'] = $error;

        return $result;
    }

    /**
     * Get last 25 items for new feed
     * @param array $items
     *
     * @return array
     */
    private function getItemNew($items)
    {
        $c = 0;
        $newItems = array();
        foreach ($items as $item) {
            $newItems[] = $item;
            $c++;
            if ($c >= 25) {
                break;
            }
        }

        return $newItems;
    }

    /**
     * Get new items since last sync of feed
     * @param array   $items
     * @param integer $dateSync
     *
     * @return array
     */
    private function getItemSync($items, $dateSync)
    {
        $newItems = array();
        foreach ($items as $item) {
            if ($item->get_date('U') > $dateSync) {
                $newItems[] = $item;
            } else {
                break;
            }
        }

        return $newItems;
    }

    /**
     * Return array of feeds
     * @return array
     */
    public function getFeedArray()
    {
        $em = $this->getEntityManager();
        $objectRepo = $em->getRepository('NPSModelBundle:Feed');
        $collection = $objectRepo->findAll();

        $collectionArray = array();
        foreach ($collection as $value) {
            $collectionArray[$value->getId()] = array (
                'id' => $value->getId(),
                'title' => $value->getTitle(),
                'website' => $value->getWebsite(),
                'favicon' => $value->getFavicon()
            );
        }

        return $collectionArray;
    }
}
