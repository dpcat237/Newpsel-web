<?php

namespace NPS\CoreBundle\Repository;

use NPS\CoreBundle\Entity\Later;
use NPS\CoreBundle\Entity\LaterItem;
use NPS\CoreBundle\Entity\UserItem;
use NPS\CoreBundle\Repository\BaseRepository;

/**
 * DeviceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LaterRepository extends BaseRepository
{
    /**
     * Create label
     * @param $user
     * @param $labelName
     */
    public function createLabel($user, $labelName)
    {
        if (!$this->hasLabelByName($user->getId(), $labelName)) {
            $label = new Later();
            $label->setName($labelName);
            $label->setUser($user);
            $this->em->persist($label);
            $this->em->flush();
        }
    }

    /**
     * Check if user already has this label
     * @param $userId
     * @param $labelName
     *
     * @return bool
     */
    public function hasLabelByName($userId, $labelName)
    {
        parent::preExecute();
        $repository = $this->em->getRepository('NPSCoreBundle:Later');

        $query = $repository->createQueryBuilder('l')
            ->where('l.user = :userId')
            ->andWhere('l.name = :name')
            ->setParameter('userId', $userId)
            ->setParameter('name', $labelName)
            ->getQuery();
        $collection = $query->getResult();

        if (count($collection)) {
            return true;
        }

        return false;
    }

    /**
     * Get list of labels of user
     * @param $userId
     *
     * @return mixed
     */
    public function getUserLabel($userId)
    {
        parent::preExecute();
        $repository = $this->em->getRepository('NPSCoreBundle:Later');

        $query = $repository->createQueryBuilder('l')
            ->where('l.user = :userId')
            ->setParameter('userId', $userId)
            ->orderBy('l.name', 'ASC')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Get count of label's unread items
     * @param $labelId
     *
     * @return int
     */
    public function getUnreadCount($labelId)
    {
        return count($this->getUnread($labelId));
    }

    /**
     * Get label's unread items
     * @param $labelId
     *
     * @return array
     */
    public function getUnread($labelId)
    {
        parent::preExecute();
        $repository = $this->em->getRepository('NPSCoreBundle:LaterItem');

        $query = $repository->createQueryBuilder('li')
            ->where('li.later = :laterId')
            ->andWhere('li.isUnread = :isUnread')
            ->setParameter('laterId', $labelId)
            ->setParameter('isUnread', true)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Get user's labels list for api
     * @param int $userId
     * @param int $lastUpdate
     *
     * @return array
     */
    public function getUserLabelsApi($userId, $lastUpdate = 0)
    {
        parent::preExecute();
        $repository = $this->em->getRepository('NPSCoreBundle:Later');
        $query = $repository->createQueryBuilder('l')
            ->select('l.id AS api_id, l.name, l.dateUp AS lastUpdate')
            ->where('l.user = :userId')
            ->andWhere('l.dateUp > :lastUpdate')
            ->orderBy('l.dateUp', 'ASC')
            ->setParameter('userId', $userId)
            ->setParameter('lastUpdate', $lastUpdate)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * @param integer $userId
     * @param array   $items
     */
    public function syncLaterItems($userId, $items)
    {
        parent::preExecute();
        foreach ($items as $itemData) {
            $itemId = $itemData->id;
            $labelId = $itemData->label_id;
            $itemRepo = $this->em->getRepository('NPSCoreBundle:Item');
            $laterRepo = $this->em->getRepository('NPSCoreBundle:Later');
            $userItem = $itemRepo->hasItem($userId, $itemId);
            if ($userItem instanceof UserItem) {
                $laterItem = $this->laterExists($labelId, $userItem->getId());
                if ($laterItem instanceof LaterItem) {
                    $laterItem->setIsUnread(true);
                    $this->em->persist($laterItem);
                } else {
                    $laterItem = new LaterItem();
                    $laterItem->setLater($laterRepo->find($labelId));
                    $laterItem->setUserItem($userItem);
                    $this->em->persist($laterItem);
                }
            }
        }
        $this->em->flush();
    }

    /**
     * Check if later item already set to label
     * @param $labelId
     * @param $userItemId
     *
     * @return mix
     */
    public function laterExists($labelId, $userItemId)
    {
        parent::preExecute();
        $repository = $this->em->getRepository('NPSCoreBundle:LaterItem');
        $query = $repository->createQueryBuilder('li')
            ->where('li.later = :laterId')
            ->andWhere('li.userItem = :userItemId')
            ->setParameter('laterId', $labelId)
            ->setParameter('userItemId', $userItemId)
            ->getQuery();
        $collection = $query->getResult();

        if (count($collection)) {
            foreach ($collection as $item) {
                return $item;
            }
        } else {
            return false;
        }
    }
}
