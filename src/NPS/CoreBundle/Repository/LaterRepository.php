<?php

namespace NPS\CoreBundle\Repository;

use NPS\CoreBundle\Entity\Later;
use NPS\CoreBundle\Entity\LaterItem;
use NPS\CoreBundle\Entity\User;
use NPS\CoreBundle\Entity\UserItem;
use Doctrine\ORM\EntityRepository;

/**
 * DeviceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LaterRepository extends EntityRepository
{
    /**
     * Create label
     * @param User   $user      User
     * @param string $labelName label name
     *
     * @return Later | null
     */
    public function createLabel(User $user, $labelName)
    {
        $entityManager = $this->getEntityManager();
        if (!$this->hasLabelByName($user->getId(), $labelName)) {
            $label = new Later();
            $label->setName($labelName);
            $label->setUser($user);

            $entityManager->persist($label);
            $entityManager->flush();

            return $label;
        }

        return null;
    }

    /**
     * Check if user already has this label
     * @param $userId
     * @param $labelName
     *
     * @return bool
     */
    public function hasLabelByName($userId, $labelName)
    {
        $query = $this->createQueryBuilder('l')
            ->where('l.user = :userId')
            ->andWhere('l.name = :name')
            ->setParameter('userId', $userId)
            ->setParameter('name', $labelName)
            ->getQuery();
        $collection = $query->getResult();

        if (count($collection)) {
            foreach ($collection as $label) {
                return $label;
            }
        }

        return false;
    }

    /**
     * Get list of labels of user
     * @param $userId
     *
     * @return mixed
     */
    public function getUserLabel($userId)
    {
        $query = $this->createQueryBuilder('l')
            ->where('l.user = :userId')
            ->setParameter('userId', $userId)
            ->orderBy('l.name', 'ASC')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Get query of list of labels of user
     * @param $userId
     *
     * @return string
     */
    public function getUserLabelsQuery($userId)
    {
        $query = $this->createQueryBuilder('l')
            ->where('l.user = :userId')
            ->setParameter('userId', $userId)
            ->orderBy('l.name', 'ASC');

        return $query;
    }

    /**
     * Get user's labels list for api
     * @param int   $userId
     * @param int   $lastUpdate
     *
     * @return array
     */
    public function getUserLabelsApi($userId, $lastUpdate = 0)
    {
        $query = $this->createQueryBuilder('l')
            ->select('l.id AS api_id, l.name, l.dateUp AS lastUpdate')
            ->where('l.user = :userId')
            ->andWhere('l.dateUp > :lastUpdate')
            ->orderBy('l.dateUp', 'ASC')
            ->setParameter('userId', $userId)
            ->setParameter('lastUpdate', $lastUpdate)
            ->getQuery();
        $collection = $query->getResult();
        foreach (array_keys($collection) as $key) {
            $collection[$key]['id'] = 0;
        }

        return $collection;
    }

    /**
     * Get user's labels list for api
     * @param int   $userId
     * @param int   $lastUpdate
     * @param array $changedLabels
     * @param array $createdIds
     *
     * @return array
     */
    public function getUserLabelsApiCreated($userId, $lastUpdate = 0, $changedLabels, $createdIds)
    {
        foreach ($changedLabels as $changedLabel) {
            $changedIds[] = $changedLabel['id'];
        }
        $changedIds = implode(',', $changedIds);

        $query = $this->createQueryBuilder('l')
            ->select('l.id AS api_id, l.name, l.dateUp AS lastUpdate')
            ->where('l.user = :userId')
            ->andWhere('l.dateUp > :lastUpdate')
            ->andWhere('l.id NOT IN (:changedIds)')
            ->orderBy('l.dateUp', 'ASC')
            ->setParameter('userId', $userId)
            ->setParameter('lastUpdate', $lastUpdate)
            ->setParameter('changedIds', $changedIds)
            ->getQuery();
        $collection = $query->getResult();

        return $this->addLabelsApiIds($collection, $createdIds);
    }

    /**
     * Extract user labels data for api
     * @param $collection
     * @param $createdIds
     *
     * @return array
     */
    private function addLabelsApiIds($collection, $createdIds){
        foreach ($collection as $key => $value) {
            $collection[$key]['id'] = 0;
            if (count($createdIds)) {
                foreach ($createdIds as $apiId => $webId) {
                    if ($value['api_id'] == $webId) {
                        $collection[$key]['id'] = $apiId;
                    }
                }
            }
        }

        return $collection;
    }

    /**
     * @param integer $userId
     * @param array   $items
     */
    public function syncLaterItems($userId, $items)
    {
        $entityManager = $this->getEntityManager();
        $userItemRepo = $entityManager->getRepository('NPSCoreBundle:UserItem');
        $laterItemRepo = $entityManager->getRepository('NPSCoreBundle:LaterItem');

        foreach ($items as $itemData) {
            $itemId = $itemData['item_id'];
            $labelId = $itemData['label_id'];
            $userItem = $userItemRepo->hasItem($userId, $itemId);
            if ($userItem instanceof UserItem) {
                $laterItem = $laterItemRepo->laterExists($labelId, $userItem->getId());
                if ($laterItem instanceof LaterItem) {
                    $laterItem->setUnread(true);
                    $entityManager->persist($laterItem);
                } else {
                    $laterItem = new LaterItem();
                    $laterItem->setLater($this->find($labelId));
                    $laterItem->setUserItem($userItem);
                    $entityManager->persist($laterItem);
                }
            }
        }
        $entityManager->flush();
    }

    /**
     * Sync labels from device
     * @param User $user
     * @param $changedLabels
     *
     * @return array
     */
    public function syncLabels(User $user, $changedLabels)
    {
        $createdIds = null;
        $entityManager = $this->getEntityManager();
        foreach ($changedLabels as $changedLabel) {
            if ($changedLabel['id']) {
                $label = $this->find($changedLabel['id']);
                $label->setName($changedLabel['name']);
                $entityManager->persist($label);
                $entityManager->flush();
            } else {
                $label = $this->hasLabelByName($user->getId(), $changedLabel['name']);
                if (!$label instanceof Later) {
                    $label = new Later();
                    $label->setUser($user);
                }
                $label->setName($changedLabel['name']);
                $entityManager->persist($label);
                $entityManager->flush();

                $createdIds[$changedLabel['api_id']] = $label->getId();
            }
        }

        return $createdIds;
    }
}
