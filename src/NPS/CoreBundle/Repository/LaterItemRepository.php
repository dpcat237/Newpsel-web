<?php

namespace NPS\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * LaterItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LaterItemRepository extends EntityRepository
{
    /**
     * Get incomplete later items
     *
     * @param int $userId
     *
     * @return array
     */
    public function getItemForCrawling($userId = null)
    {
        $query = $this->createQueryBuilder('li');
        $query
            ->select('li.id laterItem_id, i.id item_id, i.link, f.id feed_id')
            ->join('li.userItem', 'ui')
            ->join('ui.item', 'i')
            ->leftJoin('i.feed', 'f')
            ->where('li.unread = :unread')
            ->orderBy('li.id', 'DESC')
            ->setParameter('unread', true);
        if ($userId) {
            $query
                ->andWhere('ui.user = :userId')
                ->setParameter('userId', $userId);
        }
        $query = $query->getQuery();

        return $query->getArrayResult();
    }

    /**
     * Get label's items
     *
     * @param int     $labelId
     * @param boolean $unread
     *
     * @return array
     */
    public function getItems($labelId, $unread = true)
    {
        $query = $this->createQueryBuilder('li')
            ->select('li', 'ui', 'i')
            ->leftJoin('li.userItem', 'ui')
            ->leftJoin('ui.item', 'i')
            ->where('li.later = :laterId')
            ->andWhere('li.unread = :unread')
            ->orderBy('i.dateAdd', 'DESC')
            ->setParameter('laterId', $labelId)
            ->setParameter('unread', $unread);
        if (!$unread) {
            $query->setMaxResults(30);
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param array $itemIds
     * @param bool  $unread
     *
     * @return array
     */
    public function getTagsByUserItemIds($itemIds, $unread = true)
    {
        $query = $this->createQueryBuilder('ti');
        $query
            ->select('ti.id, t.id tag_id, ui.id ui_id, ui.stared')
            ->leftJoin('ti.later', 't')
            ->leftJoin('ti.userItem', 'ui')
            ->where("ti.userItem IN(:userItemsIds)")
            ->andWhere('ti.unread = :unread')
            ->setParameter('userItemsIds', $itemIds)
            ->setParameter('unread', $unread);
        $query = $query->getQuery();

        return $query->getArrayResult();
    }

    /**
     * Get unread items for api by label
     *
     * @param int $laterId
     * @param int $begin
     * @param int $limit
     *
     * @return array
     */
    public function getUnreadForApiByLabel($laterId, $begin = 0, $limit = 50)
    {
        $query = $this->createQueryBuilder('li')
            ->select('li.id AS api_id, i.id item_id, f.id feed_id, l.id later_id tag_id, li.unread AS is_unread, i.dateAdd AS date_add, f.language, i.language item_language, i.link, i.title')
            ->leftJoin('li.userItem', 'ui')
            ->leftJoin('ui.item', 'i')
            ->leftJoin('i.feed', 'f')
            ->leftJoin('li.later', 'l')
            ->where('li.later = :laterId')
            ->andWhere('li.unread = :unread')
            ->orderBy('i.dateAdd', 'DESC')
            ->setFirstResult($begin)
            ->setMaxResults($limit)
            ->setParameter('laterId', $laterId)
            ->setParameter('unread', true)
            ->getQuery();

        return $query->getArrayResult();
    }

    /**
     * Get unread items for api by several labels
     *
     * @param array $labelsIds
     * @param int   $begin
     * @param int   $limit
     *
     * @return array
     */
    public function getUnreadForApiByLabels($labelsIds, $begin = 0, $limit = 50)
    {
        $query = $this->createQueryBuilder('li');
        $query
            ->select('i.id api_id, ui.id ui_id, ui.stared, f.id feed_id, i.dateAdd AS date_add, f.language, i.language item_language, i.link, i.title, i.content')
            ->join('li.userItem', 'ui')
            ->join('ui.item', 'i')
            ->leftJoin('i.feed', 'f')
            ->where("li.later IN(:labelsIds)")
            ->andWhere('li.unread = :unread')
            ->orderBy('li.id', 'DESC')
            ->setFirstResult($begin)
            ->setMaxResults($limit)
            ->setParameter('labelsIds', $labelsIds)
            ->setParameter('unread', true);
        $query = $query->getQuery();

        return $query->getArrayResult();
    }

    /**
     * @param array $itemsData
     */
    public function insertTagItems($itemsData)
    {
        $query = "START TRANSACTION; ";
        $laterItemTable = $this->getClassMetadata()->getTableName();
        $currentTime = time();

        foreach ($itemsData as $itemData) {
            $query.= "INSERT INTO ".$laterItemTable." (user_item_id, later_id, date_add, unread, date_up) 
            VALUES(".$itemData['ui_id'].", ".$itemData['tag_id'].", ".$currentTime.", true, ".$currentTime."); ";
        }
        $query .= "COMMIT;";

        $this->getEntityManager()->getConnection()->exec($query);
    }

    /**
     * Check if later item already set to label
     *
     * @param $labelId
     * @param $userItemId
     *
     * @return mix
     */
    public function laterExists($labelId, $userItemId)
    {
        $query = $this->createQueryBuilder('li')
            ->where('li.later = :laterId')
            ->andWhere('li.userItem = :userItemId')
            ->setParameter('laterId', $labelId)
            ->setParameter('userItemId', $userItemId)
            ->getQuery();
        $collection = $query->getResult();

        if (count($collection)) {
            foreach ($collection as $item) {
                return $item;
            }
        } else {
            return false;
        }
    }

    /**
     * @param array $savedArticlesIds
     * @param bool  $unread
     */
    public function markAsRead($savedArticlesIds, $unread = false)
    {
        $query = $this->createQueryBuilder('ti');
        $query
            ->update()
            ->where('ti.id IN (:savedArticlesIds)')
            ->set('ti.unread', ':unread')
            ->setParameter('savedArticlesIds', $savedArticlesIds)
            ->setParameter('unread', $unread);
        $query->getQuery()->execute();
    }

    /**
     * Update later items status
     *
     * @param $laterItems
     */
    public function syncViewedLaterItems($laterItems)
    {
        $query = "START TRANSACTION; ";
        $laterItemTable = $this->getClassMetadata()->getTableName();
        $currentTime = time();

        foreach ($laterItems as $itemData) {
            $query.= "UPDATE ".$laterItemTable." SET unread=".$itemData['is_unread'].
                ", date_up=".$currentTime." WHERE id=".$itemData['api_id']."; ";
        }
        $query .= "COMMIT;";

        $this->getEntityManager()->getConnection()->exec($query);
    }

    /**
     * Get read items to check that unread items from api were read
     *
     * @param array $itemsIds ids of unread items
     *
     * @return array
     */
    public function getReadItems($itemsIds)
    {
        $query = $this->createQueryBuilder('li');
        $query
            ->select('li.id AS ui_id')
            ->add('where', $query->expr()->in('li.id', $itemsIds))
            ->andWhere('li.unread = :unread')
            ->orderBy('li.id', 'ASC')
            ->setParameter('unread', false);
        $query = $query->getQuery();

        return $query->getArrayResult();
    }

    /**
     * @param array $tagsIds
     */
    public function removeTagItemByTags($tagsIds)
    {
        $query = $this->createQueryBuilder('ti');
        $query
            ->delete()
            ->leftJoin('ti.later', 't')
            ->where('t.id IN(:tagsIds)')
            ->setParameter('tagsIds', $tagsIds);
        $query->getQuery()->execute();
    }

    /**
     * Count unread items of label
     *
     * @param int $laterId
     *
     * @return int
     */
    public function totalLaterUnreadItems($laterId)
    {
        $query = $this->createQueryBuilder('li');
        $query
            ->add('select', $query->expr()->count('li'))
            ->where('li.later = :laterId')
            ->andWhere('li.unread = :unread')
            ->setParameter('laterId', $laterId)
            ->setParameter('unread', true);

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * Count unread items by labels
     *
     * @param array $labelsIds
     *
     * @return int
     */
    public function totalUnreadLabelsItems($labelsIds)
    {
        $query = $this->createQueryBuilder('li');
        $query
            ->add('select', $query->expr()->count('li'))
            ->where("li.later IN(:labelsIds)")
            ->andWhere('li.unread = :unread')
            ->setParameter('labelsIds', $labelsIds)
            ->setParameter('unread', true);

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * Get later item by item id
     *
     * @param int $userId
     * @param int $itemId
     *
     * @return null
     */
    public function getByItemId($userId, $itemId)
    {
        $query = $this->createQueryBuilder('li')
            ->join('li.userItem', 'ui')
            ->where('ui.user = :userId')
            ->andWhere('ui.item = :itemId')
            ->setParameter('userId', $userId)
            ->setParameter('itemId', $itemId)
            ->setMaxResults(1)
            ->getQuery();

        $collection = $query->getResult();
        if (!count($collection)) {
            return null;
        }

        foreach ($query->getResult() as $firstItem) {
            return $firstItem;
        }
    }
}
