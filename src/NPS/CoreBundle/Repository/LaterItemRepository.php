<?php

namespace NPS\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * LaterItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LaterItemRepository extends EntityRepository
{
    /**
     * Check if exists later item by url
     * @param $userId
     * @param $labelId
     * @param $itemUrl
     *
     * @return bool
     */
    public function checkExistsLaterItemUrl($userId, $labelId, $itemUrl)
    {
        $query = $this->createQueryBuilder('li')
            ->join('li.userItem', 'ui')
            ->join('li.later', 'l')
            ->join('ui.user', 'u')
            ->join('ui.item', 'i')
            ->where('l.id = :laterId')
            ->andWhere('u.id = :userId')
            ->andWhere('i.link = :itemUrl')
            ->setParameter('laterId', $labelId)
            ->setParameter('userId', $userId)
            ->setParameter('itemUrl', $itemUrl)
            ->getQuery();
        $laterCollection = $query->getResult();

        if (count($laterCollection)) {
            foreach ($laterCollection as $later) {
                return $later;
            }
        } else {
            return false;
        }
    }

    /**
     * Get incomplete later items
     *
     * @param int $userId
     *
     * @return array
     */
    public function getItemForCrawling($userId = null)
    {
        $query = $this->createQueryBuilder('li');
        $query
            ->select('li.id laterItem_id, i.id item_id, i.link, i.content, f.id feed_id')
            ->join('li.userItem', 'ui')
            ->join('ui.item', 'i')
            ->leftJoin('i.feed', 'f')
            ->where('li.unread = :unread')
            ->andWhere(
                $query->expr()->orX(
                    'f.crawling = :isCrawling', $query->expr()->isNull('i.feed')
                )
            )
            ->orderBy('li.id', 'ASC')
            ->setParameter('unread', true)
            ->setParameter('isCrawling', true);
        if ($userId) {
            $query
                ->andWhere('ui.user = :userId')
                ->setParameter('userId', $userId);
        }
        $query = $query->getQuery();

        return $query->getArrayResult();
    }

    /**
     * Get label's unread items
     *
     * @param $labelId
     *
     * @return array
     */
    public function getUnread($labelId)
    {
        $query = $this->createQueryBuilder('li')
            ->select('li', 'ui', 'i')
            ->leftJoin('li.userItem', 'ui')
            ->leftJoin('ui.item', 'i')
            ->where('li.later = :laterId')
            ->andWhere('li.unread = :unread')
            ->andWhere('i.id >= :idMin')
            ->orderBy('i.dateAdd', 'DESC')
            ->setParameter('laterId', $labelId)
            ->setParameter('unread', true)
            ->setParameter('idMin', 1)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Get unread items for api
     *
     * @param int $laterId
     * @param int $limit
     *
     * @return array
     */
    public function getUnreadForApi($laterId, $limit = 50)
    {
        $query = $this->createQueryBuilder('li');
        $query
            ->select('li.id AS api_id, i.id item_id, f.id feed_id, l.id later_id, li.unread AS is_unread, i.dateAdd AS date_add, f.language, i.link, i.title, i.content')
            ->join('li.userItem', 'ui')
            ->join('ui.item', 'i')
            ->leftJoin('i.feed', 'f')
            ->leftJoin('li.later', 'l')
            ->where('li.unread = :unread')
            ->andWhere('li.later = :laterId')
            ->orderBy('li.id', 'ASC')
            ->setMaxResults($limit)
            ->setParameter('unread', true)
            ->setParameter('laterId', $laterId);
        $query = $query->getQuery();

        return $query->getArrayResult();
    }

    /**
     * Check if later item already set to label
     * @param $labelId
     * @param $userItemId
     *
     * @return mix
     */
    public function laterExists($labelId, $userItemId)
    {
        $query = $this->createQueryBuilder('li')
            ->where('li.later = :laterId')
            ->andWhere('li.userItem = :userItemId')
            ->setParameter('laterId', $labelId)
            ->setParameter('userItemId', $userItemId)
            ->getQuery();
        $collection = $query->getResult();

        if (count($collection)) {
            foreach ($collection as $item) {
                return $item;
            }
        } else {
            return false;
        }
    }

    /**
     * Update later items status
     *
     * @param $laterItems
     */
    public function syncViewedLaterItems($laterItems)
    {
        $query = "START TRANSACTION; ";
        $laterItemTable = $this->getEntityManager()->getClassMetadata('NPSCoreBundle:LaterItem')->getTableName();

        foreach ($laterItems as $itemData) {
            $query.= "UPDATE ".$laterItemTable." SET unread=".$itemData['unread']." WHERE id=".$itemData['api_id']."; ";
        }
        $query .= "COMMIT;";

        $this->getEntityManager()->getConnection()->executeQuery($query);
    }
}
