<?php

namespace NPS\CoreBundle\Repository;

use NPS\CoreBundle\Repository\BaseRepository;

/**
 * LaterItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LaterItemRepository extends BaseRepository
{
    /**
     * Check if exists later item by url
     * @param $userId
     * @param $labelId
     * @param $itemUrl
     *
     * @return bool
     */
    public function checkExistsLaterItemUrl($userId, $labelId, $itemUrl)
    {
        $repository = $this->getEntityManager()->getRepository('NPSCoreBundle:LaterItem');
        $query = $repository->createQueryBuilder('li')
            ->join('li.userItem', 'ui')
            ->join('li.later', 'l')
            ->join('ui.user', 'u')
            ->join('ui.item', 'i')
            ->where('l.id = :laterId')
            ->andWhere('u.id = :userId')
            ->andWhere('i.link = :itemUrl')
            ->setParameter('laterId', $labelId)
            ->setParameter('userId', $userId)
            ->setParameter('itemUrl', $itemUrl)
            ->getQuery();
        $laterCollection = $query->getResult();

        if (count($laterCollection)) {
            foreach ($laterCollection as $later) {
                return $later;
            }
        } else {
            return false;
        }
    }

    /**
     * Get incomplete later items
     * @param null $userId
     *
     * @return array
     */
    public function getItemForCrawling($userId = null)
    {
        $repository = $this->getEntityManager()->getRepository('NPSCoreBundle:LaterItem');
        $query = $repository->createQueryBuilder('li')
            ->select('li', 'ui', 'i', 'f')
            ->join('li.userItem', 'ui')
            ->join('ui.item', 'i')
            ->join('i.feed', 'f')
            ->where('f.crawling = :isCrawling')
            ->andWhere('li.unread = :unread')
            ->orderBy('li.id', 'ASC')
            ->setParameter('isCrawling', true)
            ->setParameter('unread', true);
        if ($userId) {
            $query
                ->andWhere('ui.user = :userId')
                ->setParameter('userId', $userId);
        }
        $query = $query->getQuery();
        $laterItemCollection = $query->getResult();

        return $laterItemCollection;
    }
}
