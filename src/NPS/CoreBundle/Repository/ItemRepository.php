<?php

namespace NPS\CoreBundle\Repository;

use NPS\CoreBundle\Entity\Item;
use NPS\CoreBundle\Repository\BaseRepository;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends BaseRepository
{
    /**
     * Check if are relation between user and item.
     * @param $userId
     * @param $itemId
     *
     * @return null|Item
     */
    public function hasItem($userId, $itemId)
    {
        parent::preExecute();
        $repository = $this->em->getRepository('NPSCoreBundle:UserItem');
        $query = $repository->createQueryBuilder('o')
            ->where('o.user = :userId')
            ->andWhere('o.item = :itemId')
            ->setParameter('userId', $userId)
            ->setParameter('itemId', $itemId)
            ->getQuery();
        $itemCollection = $query->getResult();
        $item = null;

        if (count($itemCollection) > 0) {
            foreach ($itemCollection as $value) {
                $item = $value;
            }
        }

        return $item;
    }

    /**
     * Check if user can see this item
     * @param $userId
     * @param $itemId
     *
     * @return bool
     */
    public function canSee($userId, $itemId)
    {
        $em = $this->getEntityManager();
        $repository = $em->getRepository('NPSCoreBundle:Feed');
        $query = $repository->createQueryBuilder('f')
            ->join('f.userFeeds', 'uf')
            ->join('f.items', 'e')
            ->join('uf.user', 'u')
            ->where('u.id = :userId')
            ->andWhere('e.id = :itemId')
            ->setParameter('userId', $userId)
            ->setParameter('itemId', $itemId)
            ->getQuery();
        $feedCollection = $query->getResult();
        if (count($feedCollection)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Get users unread items
     * @param int $userId
     * @param int $feedId
     * @param int $limit
     *
     * @return mixed
     */
    public function getUnreadItemsApi($userId, $feedId = null, $limit = 300)
    {
        parent::preExecute();
        $repository = $this->em->getRepository('NPSCoreBundle:Item');
        if ($feedId) {
            $query = $repository->createQueryBuilder('i')
                ->select('i.id AS api_id, f.id AS feed_id, i.title, i.link, i.content, ui.isStared AS is_stared, ui.unread AS is_unread, i.dateAdd AS date_add')
                ->leftJoin('i.userItems', 'ui')
                ->leftJoin('i.feed', 'f')
                ->where('ui.unread = :unread')
                ->andWhere('ui.user = :userId')
                ->andWhere('f.id = :feedId')
                ->setParameter('unread', true)
                ->setParameter('userId', $userId)
                ->setParameter('feedId', $feedId)
                ->orderBy('i.dateAdd', 'DESC')
                ->setMaxResults($limit)
                ->getQuery();
        } else {
            $query = $repository->createQueryBuilder('i')
                ->select('i.id AS api_id, f.id AS feed_id, i.title, i.link, i.content, ui.isStared AS is_stared, ui.unread AS is_unread, i.dateAdd AS date_add')
                ->leftJoin('i.userItems', 'ui')
                ->leftJoin('i.feed', 'f')
                ->where('ui.unread = :unread')
                ->andWhere('ui.user = :userId')
                ->setParameter('unread', true)
                ->setParameter('userId', $userId)
                ->orderBy('i.dateAdd', 'DESC')
                ->setMaxResults($limit)
                ->getQuery();
        }
        $itemCollection = $query->getResult();

        return $itemCollection;
    }

    /**
     * Get last feed items
     * @param $feedId
     * @param int $limit
     *
     * @return mixed
     */
    public function getLast($feedId, $limit = 25)
    {
        parent::preExecute();
        $repository = $this->em->getRepository('NPSCoreBundle:Item');
        $query = $repository->createQueryBuilder('i')
            ->where('i.feed = :feedId')
            ->orderBy('i.feed', 'DESC')
            ->setMaxResults($limit)
            ->setParameter('feedId', $feedId)
            ->getQuery();
        $itemCollection = $query->getResult();

        return $itemCollection;
    }

    /**
     * Get count of unread items by user and feed
     * @param $userId
     * @param $feedId
     *
     * @return int
     */
    public function countUnreadByFeedUser($userId, $feedId)
    {
        $feedCollection = $this->getUnreadByFeedUser($userId, $feedId);

       return count($feedCollection);
    }

    /**
     * Get unread items by user and feed
     * @param $userId
     * @param $feedId
     *
     * @return array
     */
    public function getUnreadByFeedUser($userId, $feedId)
    {
        parent::preExecute();
        $repository = $this->em->getRepository('NPSCoreBundle:UserItem');

        $query = $repository->createQueryBuilder('ui')
            ->join('ui.item', 'i')
            ->join('ui.user', 'u')
            ->where('u.id = :userId')
            ->andWhere('i.feed = :feedId')
            ->andWhere('ui.unread = :unread')
            ->setParameter('userId', $userId)
            ->setParameter('feedId', $feedId)
            ->setParameter('unread', true)
            ->getQuery();
        $itemCollection = $query->getResult();

        return $itemCollection;
    }
}