<?php

namespace NPS\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{
    /**
     * Get users unread items
     *
     * @param int $userId
     * @param int $feedId
     * @param int $limit
     *
     * @return array
     */
    public function getUnreadItems($userId, $feedId = null, $limit = 300)
    {
        $query = $this->createQueryBuilder('i')
            ->select('i.id AS api_id, ui.id AS ui_id, f.id AS feed_id, i.title, i.link, i.content, ui.stared AS is_stared, ui.unread AS is_unread, i.dateAdd AS date_add, f.language')
            ->leftJoin('i.userItems', 'ui')
            ->innerJoin('i.feed', 'f')
            ->where('ui.unread = :unread')
            ->andWhere('ui.user = :userId')
            ->andWhere('f.id = :feedId')
            ->setParameter('unread', true)
            ->setParameter('userId', $userId)
            ->setParameter('feedId', $feedId)
            ->orderBy('i.dateAdd', 'DESC')
            ->setMaxResults($limit)
            ->getQuery();
        $itemCollection = $query->getArrayResult();

        return $itemCollection;
    }

    /**
     * Get unread items for API
     *
     * @param int   $userId
     * @param array $toFilterIds
     * @param int   $limit
     *
     * @return array
     */
    public function getUnreadApi($userId, array $toFilterIds, $limit = 300)
    {
        $toFilterIds =(count($toFilterIds) < 1)? array(0) : $toFilterIds;
        $query = $this->createQueryBuilder('i');
        $query
            ->select('i.id AS api_id, ui.id AS ui_id, f.id AS feed_id, i.title, i.link, i.content, ui.stared AS is_stared, ui.unread AS is_unread, i.dateAdd AS date_add, f.language')
            ->leftJoin('i.userItems', 'ui')
            ->innerJoin('i.feed', 'f')
            ->add('where', $query->expr()->notIn('i.id', $toFilterIds))
            ->andWhere('ui.unread = :unread')
            ->andWhere('ui.user = :userId')
            ->setParameter('unread', true)
            ->setParameter('userId', $userId)
            ->orderBy('i.dateAdd', 'DESC')
            ->setMaxResults($limit);
        $query = $query->getQuery();

        return $query->getArrayResult();
    }

    /**
     * Get last feed items
     *
     * @param $feedId
     * @param int $limit
     *
     * @return mixed
     */
    public function getLast($feedId, $limit = 25)
    {
        $query = $this->createQueryBuilder('i')
            ->where('i.feed = :feedId')
            ->orderBy('i.dateAdd', 'DESC')
            ->setMaxResults($limit)
            ->setParameter('feedId', $feedId)
            ->getQuery();
        $itemCollection = $query->getResult();

        return $itemCollection;
    }

    /**
     * Update item adding language
     */
    public function addLanguage($itemId, $languageCode)
    {
        $query = $this->createQueryBuilder('i')
            ->update()
            ->set('i.language', ':languageCode')
            ->where('i.id = :itemId')
            ->setParameter('itemId', $itemId)
            ->setParameter('languageCode', $languageCode)
            ->getQuery();
        $query->execute();
    }

    /**
     * Get read items to check that unread items from api were read
     *
     * @param array $itemsIds ids of unread items
     *
     * @return array
     */
    public function getReadItems($itemsIds)
    {
        $query = $this->createQueryBuilder('i');
        $query
            ->select('i.id AS api_id')
            ->add('where', $query->expr()->in('i.id', $itemsIds))
            ->andWhere('i.unread = :unread')
            ->orderBy('i.id', 'ASC')
            ->setParameter('unread', false);
        $query = $query->getQuery();

        return $query->getArrayResult();
    }
}