<?php

namespace NPS\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use NPS\CoreBundle\Constant\DBConstants;
use NPS\CoreBundle\Entity\Item;
use NPS\CoreBundle\Entity\UserItem;

/**
 * UserItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserItemRepository extends EntityRepository
{
    /**
     * Check if are relation between user and item.
     *
     * @param int $userId
     * @param int $itemId
     *
     * @return null|Item
     */
    public function hasItem($userId, $itemId)
    {
        $query          = $this->createQueryBuilder('ui')
            ->where('ui.user = :userId')
            ->andWhere('ui.item = :userItemId')
            ->setParameter('userId', $userId)
            ->setParameter('userItemId', $itemId)
            ->getQuery();
        $itemCollection = $query->getResult();
        $item           = null;

        if (count($itemCollection) > 0) {
            foreach ($itemCollection as $value) {
                $item = $value;
            }
        }

        return $item;
    }

    /**
     * Find user item by id
     *
     * @param int $uiId
     *
     * @return null|UserItem
     */
    public function hasItemById($uiId)
    {
        return $this->find($uiId);
    }

    /**
     * Get count of unread items by user and feed
     *
     * @param $userId
     * @param $feedId
     *
     * @return int
     */
    public function countUnreadByFeedUser($userId, $feedId)
    {
        $feedCollection = $this->getByFeedUser($userId, $feedId);

        return count($feedCollection);
    }

    /**
     * Get unread items by user and feed
     *
     * @param int     $userId
     * @param int     $feedId
     * @param boolean $unread
     *
     * @return array
     */
    public function getByFeedUser($userId, $feedId, $unread = true)
    {
        $query = $this->createQueryBuilder('ui')
            ->leftJoin('ui.item', 'i')
            ->where('ui.user = :userId')
            ->andWhere('i.feed = :feedId')
            ->andWhere('ui.unread = :unread')
            ->orderBy('i.dateAdd', 'DESC')
            ->setParameter('userId', $userId)
            ->setParameter('feedId', $feedId)
            ->setParameter('unread', $unread);
        if (!$unread) {
            $query->setMaxResults(30);
        }

        return $query->getQuery()->getResult();
    }

    /**
     * Update user items status
     *
     * @param array $userItems
     */
    public function syncViewedItems($userItems)
    {
        $query         = "START TRANSACTION; ";
        $userItemTable = $this->getClassMetadata()->getTableName();
        $currentTime   = time();

        foreach ($userItems as $itemData) {
            $query .= "UPDATE " . $userItemTable . " SET stared='" . $itemData['is_stared'] . "',
                unread='" . $itemData['is_unread'] . "', date_up='" . $currentTime . "' WHERE id='" . $itemData['api_id'] . "'; ";


        }
        $query .= "COMMIT;";

        $this->getEntityManager()->getConnection()->exec($query);
    }

    /**
     * Get user's feeds with count of user's items
     *
     * @param integer $userId
     * @param boolean $all
     *
     * @return array
     */
    public function getUserFeedsForMenu($userId, $all = false)
    {
        $query = $this->createQueryBuilder('ui')
            ->select('uf.id, uf.title, COUNT(ui.id) total')
            ->innerJoin('ui.item', 'i')
            ->innerJoin('i.feed', 'f')
            ->innerJoin('f.userFeeds', 'uf')
            ->where('ui.user = :userId')
            ->andWhere('uf.user = :userId')
            ->andWhere('uf.deleted = :deleted')
            ->groupBy('f.id')
            ->orderBy('uf.title', 'ASC')
            ->setParameter('userId', $userId)
            ->setParameter('deleted', false);
        if (!$all) {
            $query
                ->andWhere('ui.unread = :unread')
                ->setParameter('unread', true);
        }
        $query = $query->getQuery();

        return $query->getArrayResult();
    }

    /**
     * Get read items to check that unread items from api were read
     *
     * @param int   $userId   user id
     * @param array $itemsIds ids of unread items
     *
     * @return array
     */
    public function getReadItems($userId, $itemsIds)
    {
        $query = $this->createQueryBuilder('ui');
        $query
            ->select('i.id AS item_id')
            ->innerJoin('ui.item', 'i')
            ->add('where', $query->expr()->in('i.id', $itemsIds))
            ->andWhere('ui.unread = :unread')
            ->andWhere('ui.user = :userId')
            ->setParameter('unread', false)
            ->setParameter('userId', $userId);
        $query = $query->getQuery();

        return $query->getArrayResult();
    }

    /**
     * Get unread feed items ids
     *
     * @param int $userId
     * @param int $begin
     * @param int $limit
     *
     * @return array
     */
    public function getUnreadFeedItems($userId, $begin = 0, $limit = 300)
    {
        $itemTable     = $this->getEntityManager()->getClassMetadata('NPSCoreBundle:Item')->getTableName();
        $userFeedTable = $this->getEntityManager()->getClassMetadata('NPSCoreBundle:UserFeed')->getTableName();
        $userItemTable = $this->getEntityManager()->getClassMetadata('NPSCoreBundle:UserItem')->getTableName();
        $query         = "SELECT ui.id AS api_id, ui.stared AS is_stared, ui.unread AS is_unread, ui.item_id
            FROM " . $userItemTable . " ui
            LEFT JOIN " . $itemTable . " i1_ ON ui.item_id = i1_.id
            LEFT JOIN " . $userFeedTable . " f2_ ON i1_.feed_id = f2_.feed_id AND ui.user_id = f2_.user_id
            WHERE ui.shared=false AND ui.unread=true AND ui.user_id=" . $userId . " AND f2_.deleted=0 ORDER BY ui.item_id DESC LIMIT " . $begin . "," . $limit . ";";
        $query         = $this->getEntityManager()->getConnection()->executeQuery($query);

        return $query->fetchAll();
    }

    /**
     * Count unread feed items
     *
     * @param int $userId
     *
     * @return int
     */
    public function totalUnreadFeedItems($userId)
    {
        $query = $this->createQueryBuilder('ui');
        $query
            ->add('select', $query->expr()->count('ui'))
            ->where('ui.shared = :shared')
            ->andWhere('ui.unread = :unread')
            ->andWhere('ui.user = :userId')
            ->setParameter('shared', false)
            ->setParameter('unread', true)
            ->setParameter('userId', $userId);

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * Get users stared/favorite items
     *
     * @param int $userId
     *
     * @return array
     */
    public function getStaredItems($userId)
    {
        $query = $this->createQueryBuilder('ui')
            ->where('ui.user = :userId')
            ->andWhere('ui.stared = :stared')
            ->setParameter('userId', $userId)
            ->setParameter('stared', true)
            ->orderBy('ui.dateAdd', 'DESC')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Mark as read all unread
     *
     * @param int $userId
     * @param int $feedId
     */
    public function markAllRead($userId, $feedId)
    {
        $query         = "START TRANSACTION; ";
        $userItemTable = $this->getClassMetadata()->getTableName();
        $itemTable     = DBConstants::ITEM_TABLE;

        $query .= "UPDATE " . $userItemTable . " ui
            LEFT JOIN " . $itemTable . " i ON ui.item_id = i.id
            SET unread=false WHERE ui.user_id=" . $userId . " AND i.feed_id=" . $feedId . " AND ui.unread=true;";
        $query .= "COMMIT;";

        $this->getEntityManager()->getConnection()->exec($query);
    }
}
