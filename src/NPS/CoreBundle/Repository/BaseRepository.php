<?php

namespace NPS\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * Shop
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseRepository extends EntityRepository
{
    //we will have an EntityManager here
    protected $em;

    /**
     * This function will be executed before any controller action
     */
    public function preExecute()
    {
        $this->em = $this->getEntityManager();
    }

    /**
     * Get list of shops with pagination limits
     * @param integer $offset  offset
     * @param integer $limit   limit
     * @param array   $orderBy rows to order by
     * @param array   $where   array of "where" filter, only equals
     * @param array   $join    array
     *
     * @return array
     */
    public function getListPagination($offset = 0, $limit = 0, $orderBy = array(), $where = array(), $join = array())
    {
        $obj = $this->createQueryBuilder('o');

        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $obj->setFirstResult($offset);
                $obj->setMaxResults($limit);
            }
            //else we want to display all items on one page
        }

        //Adding join
        if (count($join)) { //TODO:
            foreach ($join as $key2 => $value2) {
                //$obj->leftJoin($key2, $value2);
                //$obj->add('leftJoin', $key2.' ON '.$value2);
            }
        }

        //Adding filters (only equal)
        if (count($where)) {
            $c = 1;
            foreach ($where as $key1 => $value1) {
                $valKey = 'key_'.$c;
                if ($c == 1) {
                    $obj->where('o.'.$key1.' = :'.$valKey);
                } else {
                    $obj->andWhere('o.'.$key1.' = :'.$valKey);
                }
                $obj->setParameter($valKey, $value1);
                $c++;
            }
        }

        //Adding defined sorting parameters from variable into query
        if (count($orderBy)) {
            foreach ($orderBy as $key2 => $value2) {
                $obj->add('orderBy', $key2.' '.$value2);
            }
        }

        //Get our query
        $q = $obj->getQuery();

        return $q->getResult();
    }

    /**
     * Get count of shops
     * @return mixed
     */
    public function getCount()
    {
        //Create query builder for languages table
        $qb = $this->createQueryBuilder('o');
        //Add Count expression to query
        $qb->add('select', $qb->expr()->count('o'));
        //Get our query
        $q = $qb->getQuery();
        //Return number of items
        return $q->getSingleScalarResult();
    }
}
