<?php

namespace NPS\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserFeedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserFeedRepository extends EntityRepository
{
    /**
     * Count active subscribers
     *
     * @param $feedId
     *
     * @return int
     */
    public function countActiveSubscribers($feedId)
    {
        $query = $this->createQueryBuilder('uf')
            ->select('count(uf.id)')
            ->where('uf.feed = :feedId')
            ->andWhere('uf.deleted = :deleted')
            ->setParameter('feedId', $feedId)
            ->setParameter('deleted', false)
            ->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
     * Check if user is subscribed
     * @param int $userId user id
     * @param int $feedId feed id
     *
     * @return bool
     */
    public function checkUserSubscribed($userId, $feedId)
    {
        $query = $this->createQueryBuilder('o')
            ->where('o.user = :userId')
            ->andWhere('o.feed = :feedId')
            ->setParameter('userId', $userId)
            ->setParameter('feedId', $feedId)
            ->getQuery();
        $feedCollection = $query->getResult();

        if (count($feedCollection)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Get user's feeds list for menu
     *
     * @param $userId
     *
     * @return mixed
     */
    public function getUserFeeds($userId)
    {
        $query = $this->createQueryBuilder('uf')
            ->where('uf.user = :userId')
            ->andWhere('uf.deleted = :deleted')
            ->orderBy('uf.title', 'ASC')
            ->setParameter('userId', $userId)
            ->setParameter('deleted', false)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Update feed data
     *
     * @param int    $feedId
     * @param string $title
     * @param int    $dateUp
     */
    public function updateFeed($feedId, $title, $dateUp)
    {
        $query = $this->createQueryBuilder('uf')
            ->update()
            ->set('uf.title', ':title')
            ->set('uf.dateUp', ':dateUp')
            ->where('uf.feed = :feedId')
            ->setParameter('feedId', $feedId)
            ->setParameter('title', $title)
            ->setParameter('dateUp', $dateUp)
            ->getQuery();
        $query->execute();
    }
}
