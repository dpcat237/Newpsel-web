<?php

namespace NPS\CoreBundle\Repository;

use NPS\CoreBundle\Entity\Feed;
use Doctrine\ORM\EntityRepository;

/**
 * FeedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeedRepository extends EntityRepository
{
    /**
     * Check if already exists this feed in data base
     * @param string $url
     *
     * @return Feed
     */
    public function checkExistFeedUrl($url)
    {
        $urlHash = sha1($url);
        $feed = $this->findOneByUrlHash($urlHash);

        return $feed;
    }

    /**
     * Get feeds to updated data
     *
     * @return mixed
     */
    public function getFeedsToUpdateData()
    {
        $query = $this->createQueryBuilder('f')
            ->where('f.enabled = :enabled')
            ->andWhere('(f.dateSync + f.syncInterval) <= :currentTime')
            ->orderBy('f.syncInterval', 'ASC')
            ->setParameter('enabled', true)
            ->setParameter('currentTime', time())
            ->getQuery();
        $feedCollection = $query->getResult();

        return $feedCollection;
    }

    /**
     * Get query of list of user active feeds
     *
     * @param $userId
     *
     * @return string
     */
    public function getUserFeedsQuery($userId)
    {
        $query = $this->createQueryBuilder('f')
            ->join('f.userFeeds', 'uf')
            ->join('uf.user', 'u')
            ->where('u.id = :userId')
            ->andWhere('uf.deleted = :deleted')
            ->orderBy('f.title', 'ASC')
            ->setParameter('userId', $userId)
            ->setParameter('deleted', false);

        return $query;
    }

    /**
     * Get user's feeds list
     * @param $userId
     *
     * @return mixed
     */
    public function getUserFeeds($userId)
    {
        $query = $this->createQueryBuilder('f')
            ->join('f.userFeeds', 'uf')
            ->join('uf.user', 'u')
            ->where('u.id = :userId')
            ->orderBy('f.title', 'ASC')
            ->setParameter('userId', $userId)
            ->getQuery();
        $feedCollection = $query->getResult();

        return $feedCollection;
    }

    /**
     * Get user's feeds list for api
     * @param int $userId
     * @param int $lastUpdate
     *
     * @return array
     */
    public function getUserFeedsApi($userId, $lastUpdate = 0)
    {
        $query = $this->createQueryBuilder('f')
            ->select('f.id AS api_id, uf.title, f.website, f.favicon, uf.dateUp AS lastUpdate')
            ->join('f.userFeeds', 'uf')
            ->where('uf.user = :userId')
            ->andWhere('uf.dateUp >= :lastUpdate')
            ->andWhere('uf.deleted = :deleted')
            ->setParameter('userId', $userId)
            ->setParameter('lastUpdate', $lastUpdate)
            ->setParameter('deleted', false)
            ->getQuery();
        $feedCollection = $query->getResult();

        return $feedCollection;
    }

    /**
     * Get filters for cache
     *
     * @return array
     */
    public function getFeedsFiltersForCache($type = null)
    {
        $query = $this->createQueryBuilder('f')
            ->select('f', 'ff', 'fi', 'u', 'l')
            //->select('f.id feedId, fi.id filterId, u.id userId')
            ->join('f.filterFeeds', 'ff')
            ->join('ff.filter', 'fi')
            ->join('fi.user', 'u')
            ->join('fi.later', 'l')
            ->where('f.enabled = :enabled')
            ->andWhere('ff.deleted = :deleted')
            ->orderBy('f.id', 'ASC')
            ->setParameter('enabled', true)
            ->setParameter('deleted', false);

        if ($type) {
            $query->andWhere('fi.type = :type')
                ->setParameter('type', $type);
        }

        $collection = $query->getQuery()->getArrayResult();

        return $collection;
    }
}
